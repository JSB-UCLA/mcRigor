// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mc_indpd_stats_cpp
double mc_indpd_stats_cpp(const Eigen::MatrixXd& dat);
RcppExport SEXP _mcRigor_mc_indpd_stats_cpp(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(mc_indpd_stats_cpp(dat));
    return rcpp_result_gen;
END_RCPP
}
// colwise_perm_cpp
Eigen::MatrixXd colwise_perm_cpp(const Eigen::MatrixXd& dat);
RcppExport SEXP _mcRigor_colwise_perm_cpp(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(colwise_perm_cpp(dat));
    return rcpp_result_gen;
END_RCPP
}
// rowwise_perm_cpp
Eigen::MatrixXd rowwise_perm_cpp(const Eigen::MatrixXd& dat);
RcppExport SEXP _mcRigor_rowwise_perm_cpp(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(rowwise_perm_cpp(dat));
    return rcpp_result_gen;
END_RCPP
}
// scale_cpp
Eigen::MatrixXd scale_cpp(const Eigen::MatrixXd& M);
RcppExport SEXP _mcRigor_scale_cpp(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(scale_cpp(M));
    return rcpp_result_gen;
END_RCPP
}
// mc_test_stats
Eigen::Vector3d mc_test_stats(const Eigen::MatrixXd& counts, const double gene_select_thre);
RcppExport SEXP _mcRigor_mc_test_stats(SEXP countsSEXP, SEXP gene_select_threSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const double >::type gene_select_thre(gene_select_threSEXP);
    rcpp_result_gen = Rcpp::wrap(mc_test_stats(counts, gene_select_thre));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mcRigor_mc_indpd_stats_cpp", (DL_FUNC) &_mcRigor_mc_indpd_stats_cpp, 1},
    {"_mcRigor_colwise_perm_cpp", (DL_FUNC) &_mcRigor_colwise_perm_cpp, 1},
    {"_mcRigor_rowwise_perm_cpp", (DL_FUNC) &_mcRigor_rowwise_perm_cpp, 1},
    {"_mcRigor_scale_cpp", (DL_FUNC) &_mcRigor_scale_cpp, 1},
    {"_mcRigor_mc_test_stats", (DL_FUNC) &_mcRigor_mc_test_stats, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mcRigor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
